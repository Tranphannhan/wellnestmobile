import { UpdatePatientInformation } from "@/services/lookup";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { useFocusEffect } from "@react-navigation/native";
import React, { useCallback, useEffect, useState } from "react";
import {
  ActivityIndicator,
  ScrollView,
  StyleSheet,
  Text,
  TextInput,
  TouchableOpacity,
  View
} from "react-native";
import { Card } from "react-native-paper";

export default function PatientInformationDetails() {
  const [patient, setPatient] = useState<any>(null);
  const [loading, setLoading] = useState(true);

  const loadPatientInfo = async () => {
    try {
      const saved = await AsyncStorage.getItem("patientInfo");
      if (saved) {
        const parsed = JSON.parse(saved);
        console.log("üìå D·ªØ li·ªáu m·ªõi load t·ª´ AsyncStorage:", parsed);

        setPatient({
          _id : parsed._id || "",
          hoTen: parsed.hoTen || "",
          ngaySinh: parsed.ngaySinh || "",
          gioiTinh: parsed.gioiTinh || "",
          soBHYT: parsed.soBHYT || "",
          soCCCD: parsed.soCCCD || "",
          soDienThoai: parsed.soDienThoai || "",
          sdtNguoiThan: parsed.sdtNguoiThan || "",
          diaChi: parsed.diaChi || "",
          lichSuBenh: parsed.lichSuBenh || "",
        });


      } else {
        setPatient(null);
      }
    } catch (error) {
      console.log("‚ùå L·ªói load d·ªØ li·ªáu:", error);
    } finally {
      setLoading(false);
    }
  };

  useFocusEffect(
    useCallback(() => {
      loadPatientInfo();
    }, [])
  );



  // üîπ H√†m c·∫≠p nh·∫≠t d·ªØ li·ªáu
const handleUpdate = useCallback(async () => {
  try {
    const result = await UpdatePatientInformation(patient);
    console.log("‚úÖ API tr·∫£ v·ªÅ:", result);
    alert("C·∫≠p nh·∫≠t th√†nh c√¥ng!");
    
    // n·∫øu c·∫ßn th√¨ l∆∞u l·∫°i v√†o AsyncStorage
    await AsyncStorage.setItem("patientInfo", JSON.stringify(patient));

  } catch (error: any) {
    console.log("‚ùå L·ªói c·∫≠p nh·∫≠t:", error.message);
    alert("C·∫≠p nh·∫≠t th·∫•t b·∫°i: " + error.message);
  }
}, [patient]);




  useEffect (() => {
    console.log('chay d·ªØ li·ªáu --- ');
    console.log(patient);
  }, [patient]);



  if (loading) {
    return (
      <View style={styles.center}>
        <ActivityIndicator size="large" color="#007A86" />
      </View>
    );
  }

  if (!patient) {
    return (
      <View style={styles.center}>
        <Text>Ch∆∞a c√≥ th√¥ng tin b·ªánh nh√¢n</Text>
      </View>
    );
  }

  return (
    <ScrollView style={styles.container}>
      {/* 3 th√¥ng tin hi·ªÉn th·ªã */}
      <Card style={styles.card}>
        <Text style={styles.label}>H·ªç v√† t√™n</Text>
        <Text style={styles.value}>{patient.hoTen}</Text>
      </Card>

      <Card style={styles.card}>
        <Text style={styles.label}>Ng√†y sinh</Text>
        <Text style={styles.value}>{patient.ngaySinh}</Text>
      </Card>

      <Card style={styles.card}>
        <Text style={styles.label}>Gi·ªõi t√≠nh</Text>
        <Text style={styles.value}>{patient.gioiTinh}</Text>
      </Card>

      {/* C√°c tr∆∞·ªùng nh·∫≠p */}
      <Card style={styles.card}>
        <Text style={styles.label}>S·ªë BHYT</Text>
        <TextInput
          style={styles.input}
          value={patient?.soBHYT || ""}  
          placeholder="Nh·∫≠p s·ªë BHYT"
          onChangeText={(text) => setPatient({ ...patient, soBHYT: text })}
        />
      </Card>

      <Card style={styles.card}>
        <Text style={styles.label}>S·ªë CCCD</Text>
        <TextInput
          style={styles.input}
          placeholder="Nh·∫≠p s·ªë CCCD"
          value={patient?.soCCCD || ""}  
          onChangeText={(text) => setPatient({ ...patient, soCCCD: text })}
        />
      </Card>

      <Card style={styles.card}>
        <Text style={styles.label}>S·ªë ƒëi·ªán tho·∫°i</Text>
        <TextInput
          style={styles.input}
          placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
          value={patient?.soDienThoai || ""}  
          onChangeText={(text) => setPatient({ ...patient, soDienThoai: text })}
        />
      </Card>

      <Card style={styles.card}>
        <Text style={styles.label}>SƒêT ng∆∞·ªùi th√¢n</Text>
        <TextInput
          style={styles.input}
          placeholder="Nh·∫≠p SƒêT ng∆∞·ªùi th√¢n"
          value={patient?.sdtNguoiThan || ""}  
          onChangeText={(text) => setPatient({ ...patient, sdtNguoiThan: text })}
        />
      </Card>

      <Card style={styles.card}>
        <Text style={styles.label}>ƒê·ªãa ch·ªâ</Text>
        <TextInput
          style={styles.input}
          placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ"
          value={patient?.diaChi || ""}  
          onChangeText={(text) => setPatient({ ...patient, diaChi: text })}
        />
      </Card>

      <Card style={styles.card}>
        <Text style={styles.label}>L·ªãch s·ª≠ b·ªánh</Text>
        <TextInput
          style={styles.input}
          placeholder="Nh·∫≠p l·ªãch s·ª≠ b·ªánh"
          value={patient?.lichSuBenh || ""}  
          onChangeText={(text) => setPatient({ ...patient, lichSuBenh: text })}
        />
      </Card>

      {/* üîπ N√∫t c·∫≠p nh·∫≠t */}
      <TouchableOpacity style={styles.button} onPress={handleUpdate}>
        <Text style={styles.buttonText}>C·∫≠p nh·∫≠t th√¥ng tin</Text>
      </TouchableOpacity>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, padding: 16, backgroundColor: "#f5f6fa" },
  card: {
    padding: 12,
    marginBottom: 12,
    borderRadius: 12,
    backgroundColor: "#fff",
    elevation: 2,
  },
  label: { fontSize: 14, fontWeight: "600", color: "#007A86" },
  value: { fontSize: 15, color: "#333", marginTop: 4 },
  input: {
    borderWidth: 1,
    borderColor: "#ddd",
    borderRadius: 8,
    padding: 10,
    fontSize: 14,
    marginTop: 6,
    backgroundColor: "#fafafa",
  },
  button: {
    marginTop: 20,
    padding: 14,
    borderRadius: 10,
    backgroundColor: "#007A86",
    alignItems: "center",
    marginBottom : 120
  },
  buttonText: { color: "#fff", fontSize: 16, fontWeight: "600" },
  center: { flex: 1, justifyContent: "center", alignItems: "center" },
});
